.. _difPy.build:

difPy.build
^^^^^^^^^^

Before difPy can perform any search, it needs to build its image repository and transform the images in the provided directory into tensors. This is what is done when ``difPy.build()`` is invoked.

Upon completion, ``difPy.build()`` returns a ``dif`` object that can be used in :ref:`difPy.search` to start the search process.

``difPy.build`` supports the following parameters:

.. code-block:: python

   difPy.build(*directory, recursive=True, in_folder=False, limit_extensions=True, px_size=50, show_progress=True, processes=None)

.. csv-table::
   :header: Parameter,Input Type,Default Value,Other Values
   :widths: 10, 10, 10, 20
   :class: tight-table

   :ref:`directory`,"``str``, ``list``",,
   :ref:`recursive`,``bool``,``True``,``False``
   :ref:`in_folder`,"``bool``, ``False``",``True``
   :ref:`limit_extensions`,``bool``,``True``,``False``
   :ref:`px_size`,"``int``, ``float``",50, ``int``
   :ref:`show_progress`,``bool``,``True``,``False``
   :ref:`processes`,``int``,``None`` (``os.cpu_count()``), ``int``

.. note::

   If you want to reuse the image tensors generated by difPy in your own application, you can access the generated repository by calling ``difPy.build._tensor_dictionary``. To reverse the image IDs to the original filenames, use ``difPy.build._filename_dictionary``.

.. _directory:

.. include:: /parameters/directory.rst

.. _recursive:

.. include:: /parameters/recursive.rst

.. _in_folder:

.. include:: /parameters/in_folder.rst

.. _limit_extensions:

.. include:: /parameters/limit_extensions.rst

.. _px_size:

.. include:: /parameters/px_size.rst

.. _show_progress:

.. include:: /parameters/show_progress.rst

.. _processes:
 
.. include:: /parameters/processes.rst

.. _logs:

.. include:: /parameters/deprecated/logs.rst